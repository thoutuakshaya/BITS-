{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "9620cb79-5442-446b-a9c5-1b0942629ac4",
   "metadata": {},
   "outputs": [],
   "source": [
    "class TicTacToe:\n",
    "    def __init__(self):\n",
    "        self.board = [[' ' for _ in range(3)] for _ in range(3)]\n",
    "        self.current_player = 'X'\n",
    "\n",
    "    def print_board(self):\n",
    "        for row in self.board:\n",
    "            print(' | '.join(row))\n",
    "            print('---------')\n",
    "\n",
    "    def is_valid_move(self, row, col):\n",
    "        return self.board[row][col] == ' '\n",
    "\n",
    "    def make_move(self, row, col):\n",
    "        if self.is_valid_move(row, col):\n",
    "            self.board[row][col] = self.current_player\n",
    "            self.current_player = 'O' if self.current_player == 'X' else 'X'\n",
    "            return True\n",
    "        return False\n",
    "\n",
    "    def is_game_over(self):\n",
    "        # Check rows and columns for a win\n",
    "        for i in range(3):\n",
    "            if self.board[i][0] == self.board[i][1] == self.board[i][2] != ' ':\n",
    "                return True\n",
    "            if self.board[0][i] == self.board[1][i] == self.board[2][i] != ' ':\n",
    "                return True\n",
    "        # Check diagonals for a win\n",
    "        if self.board[0][0] == self.board[1][1] == self.board[2][2] != ' ':\n",
    "            return True\n",
    "        if self.board[0][2] == self.board[1][1] == self.board[2][0] != ' ':\n",
    "            return True\n",
    "        # Check for a draw\n",
    "        if all(cell != ' ' for row in self.board for cell in row):\n",
    "            return True\n",
    "        return False\n",
    "\n",
    "    def minimax(self, depth, is_maximizing):\n",
    "        if self.is_game_over():\n",
    "            if self.current_player == 'X':\n",
    "                return -10 + depth\n",
    "            elif self.current_player == 'O':\n",
    "                return 10 - depth\n",
    "            else:\n",
    "                return 0\n",
    "\n",
    "        if is_maximizing:\n",
    "            best_score = -1000\n",
    "            for i in range(3):\n",
    "                for j in range(3):\n",
    "                    if self.is_valid_move(i, j):\n",
    "                        self.make_move(i, j)\n",
    "                        score = self.minimax(depth + 1, False)\n",
    "                        self.board[i][j] = ' '\n",
    "                        self.current_player = 'X' if self.current_player == 'O' else 'X'\n",
    "                        best_score = max(score, best_score)\n",
    "            return best_score\n",
    "        else:\n",
    "            best_score = 1000\n",
    "            for i in range(3):\n",
    "                for j in range(3):\n",
    "                    if self.is_valid_move(i, j):\n",
    "                        self.make_move(i, j)\n",
    "                        score = self.minimax(depth + 1, True)\n",
    "                        self.board[i][j] = ' '\n",
    "                        self.current_player = 'X' if self.current_player == 'O' else 'X'\n",
    "                        best_score = min(score, best_score)\n",
    "            return best_score\n",
    "\n",
    "    def ai_move(self):\n",
    "        best_score = -1000\n",
    "        best_move = None\n",
    "        for i in range(3):\n",
    "            for j in range(3):\n",
    "                if self.is_valid_move(i, j):\n",
    "                    self.make_move(i, j)\n",
    "                    score = self.minimax(0, False)\n",
    "                    self.board[i][j] = ' '\n",
    "                    self.current_player = 'X' if self.current_player == 'O' else 'X'\n",
    "                    if score > best_score:\n",
    "                        best_score = score\n",
    "                        best_move = (i, j)\n",
    "        self.make_move(best_move[0], best_move[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "db7c269e-8d66-43ca-9991-b83723d70217",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  |   |  \n",
      "---------\n",
      "  |   |  \n",
      "---------\n",
      "  |   |  \n",
      "---------\n",
      "AI's turn...\n",
      "X |   |  \n",
      "---------\n",
      "  |   |  \n",
      "---------\n",
      "  |   |  \n",
      "---------\n",
      "X |   |  \n",
      "---------\n",
      "  |   |  \n",
      "---------\n",
      "  |   |  \n",
      "---------\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter row for O:  1\n",
      "Enter column for O:  1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X |   |  \n",
      "---------\n",
      "  | O |  \n",
      "---------\n",
      "  |   |  \n",
      "---------\n",
      "AI's turn...\n",
      "X |   |  \n",
      "---------\n",
      "X | O |  \n",
      "---------\n",
      "  |   |  \n",
      "---------\n",
      "X |   |  \n",
      "---------\n",
      "X | O |  \n",
      "---------\n",
      "  |   |  \n",
      "---------\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter row for O:  2\n",
      "Enter column for O:  0\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X |   |  \n",
      "---------\n",
      "X | O |  \n",
      "---------\n",
      "O |   |  \n",
      "---------\n",
      "AI's turn...\n",
      "X |   | X\n",
      "---------\n",
      "X | O |  \n",
      "---------\n",
      "O |   |  \n",
      "---------\n",
      "X |   | X\n",
      "---------\n",
      "X | O |  \n",
      "---------\n",
      "O |   |  \n",
      "---------\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter row for O:  0\n",
      "Enter column for O:  1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X | O | X\n",
      "---------\n",
      "X | O |  \n",
      "---------\n",
      "O |   |  \n",
      "---------\n",
      "AI's turn...\n",
      "X | O | X\n",
      "---------\n",
      "X | O |  \n",
      "---------\n",
      "O | X |  \n",
      "---------\n",
      "X | O | X\n",
      "---------\n",
      "X | O |  \n",
      "---------\n",
      "O | X |  \n",
      "---------\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter row for O:  2\n",
      "Enter column for O:  2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X | O | X\n",
      "---------\n",
      "X | O |  \n",
      "---------\n",
      "O | X | O\n",
      "---------\n",
      "AI's turn...\n",
      "X | O | X\n",
      "---------\n",
      "X | O | X\n",
      "---------\n",
      "O | X | O\n",
      "---------\n",
      "Game Over!\n"
     ]
    }
   ],
   "source": [
    "game = TicTacToe()\n",
    "\n",
    "while True:\n",
    "    game.print_board()\n",
    "    if game.current_player == 'O':\n",
    "        row = int(input(\"Enter row for O: \"))\n",
    "        col = int(input(\"Enter column for O: \"))\n",
    "        if game.make_move(row, col):\n",
    "            if game.is_game_over():\n",
    "                game.print_board()\n",
    "                print(\"Game Over!\")\n",
    "                break\n",
    "        else:\n",
    "            print(\"Invalid move, try again.\")\n",
    "    else:\n",
    "        print(\"AI's turn...\")\n",
    "        game.ai_move()\n",
    "        game.print_board()\n",
    "        if game.is_game_over():\n",
    "            print(\"Game Over!\")\n",
    "            break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c641c70f-1776-464d-9834-cd25638939c4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
